#!/usr/bin/env python
# Copyright 2013 Daniel Narvaez
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import json
import os
import shutil
import subprocess
import sys
import tarfile
import urllib2
import StringIO

base_dir = os.path.dirname(os.path.abspath(__file__))
start_message = "Installing virtualenv..."
end_message = "Done."
packages = ["osbuild"]
virtualenv_version = "1.9.1"
sandbox_dir = os.path.join("build", "out", "sandbox")
virtualenv_dir = os.path.join(sandbox_dir, "install")
cache_dir = os.path.join(sandbox_dir, "cache")
etag = "13"


def get_cache_dir():
    return os.path.join(base_dir, cache_dir)


def get_virtualenv_dir():
    return os.path.join(base_dir, virtualenv_dir)


def get_stamp_path():
    return get_virtualenv_dir() + ".stamp"


def get_bin_path(name):
    return os.path.join(get_virtualenv_dir(), "bin", name)


def create_virtualenv():
    source_dir = os.path.join(get_cache_dir(),
                              "virtualenv-%s" % virtualenv_version)

    if not os.path.exists(source_dir):
        url = "https://pypi.python.org/packages/source/v/" \
              "virtualenv/virtualenv-%s.tar.gz" % virtualenv_version

        f = urllib2.urlopen(url)
        buffer = StringIO.StringIO(f.read())
        with tarfile.open(fileobj=buffer, mode="r:gz") as tar:
            tar.extractall(get_cache_dir())

    subprocess.check_call(["python",
                           os.path.join(source_dir, "virtualenv.py"),
                           "-q", "--system-site-packages",
                           get_virtualenv_dir()])


def install_packages():
    args = [get_bin_path("pip"), "-q", "install"]
    args.extend(packages)

    subprocess.check_call(args)


def check_stamp():
    try:
        with open(get_stamp_path()) as f:
            stamp = json.load(f)
    except (IOError, ValueError):
        return True, True

    return stamp["etag"] != etag


def write_stamp():
    stamp = {"etag": etag}

    with open(get_stamp_path(), "w") as f:
        json.dump(stamp, f)


def main():
    os.environ["PIP_DOWNLOAD_CACHE"] = get_cache_dir()

    changed = check_stamp()

    if changed:
        print(start_message)

        try:
            shutil.rmtree(get_virtualenv_dir())
        except OSError:
            pass

        create_virtualenv()
        install_packages()

        write_stamp()

        print(end_message)

    if len(sys.argv) > 1:
        command = sys.argv[1]
    else:
        command = "shell"

    args = [get_bin_path("python"),
            os.path.join(base_dir, "build", "commands", command)]

    if len(sys.argv) > 2:
        args.extend(sys.argv[2:])

    # FIXME temporary hack, should rewrite the command in python
    if command == "bug-report":
        args = args[1:]

    os.execl(args[0], *args)


if __name__ == "__main__":
    main()
