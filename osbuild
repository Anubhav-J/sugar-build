#!/usr/bin/env python
# Copyright 2013 Daniel Narvaez
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import fcntl
import os
import shutil
import subprocess
import sys
import tarfile
import urllib2
import StringIO

base_dir = os.path.dirname(os.path.abspath(__file__))
virtualenv_version = "1.9.1"
broot_dir = "build"
commands_dir = os.path.join("build", "commands")
main_repo = "sugarlabs/sugar-build"
docs_url = "http://developer.sugarlabs.org/dev-environment.md.html"
buildbot_env = "SUGAR_BUILDBOT"
lock_file = None


def get_lock_file_path(lock_name=None):
    if lock_name is None:
        if is_chroot():
            lock_name = "broot"
        else:
            lock_name = "host"

    return os.path.join(get_base_dir(), ".lock-%s" % lock_name)


def get_lock_file(lock_name=None):
    global lock_file

    if lock_file is not None:
        return lock_file

    lock_file = open(get_lock_file_path(), "w")

    return lock_file


def get_base_dir():
    return base_dir


def get_broot_dir():
    return os.path.join(get_base_dir(), broot_dir)


def get_sandbox_dir(sandbox_name=None):
    if sandbox_name is None:
        if is_chroot():
            sandbox_name = "broot"
        else:
            sandbox_name = "host"

    return os.path.join(get_base_dir(), "build", "out",
                        "sandbox-%s" % sandbox_name)


def get_commands_dir(commands_group=None):
    if commands_group is None:
        return os.path.join(get_base_dir(), commands_dir)
    else:
        return os.path.join(get_base_dir(), commands_dir, commands_group)


def get_cache_dir():
    return os.path.join(get_sandbox_dir(), "cache")


def get_virtualenv_dir(sandbox_name=None):
    return os.path.join(get_sandbox_dir(sandbox_name=sandbox_name), "install")


def get_log_dir():
    return os.path.join(get_base_dir(), "build", "logs")


def get_broot_log_path():
    return os.path.join(get_log_dir(), "broot.log")


def get_prefs_path():
    return os.path.join(get_base_dir(), "prefs.json")


def get_bin_path(name=None):
    bin_path = os.path.join(get_virtualenv_dir(), "bin")

    if name is None:
        return bin_path
    else:
        return os.path.join(bin_path, name)


def create_virtualenv():
    source_dir = os.path.join(get_cache_dir(),
                              "virtualenv-%s" % virtualenv_version)

    if not os.path.exists(source_dir):
        url = "https://pypi.python.org/packages/source/v/" \
              "virtualenv/virtualenv-%s.tar.gz" % virtualenv_version

        f = urllib2.urlopen(url)
        buffer = StringIO.StringIO(f.read())
        with tarfile.open(fileobj=buffer, mode="r:gz") as tar:
            tar.extractall(get_cache_dir())

    subprocess.check_call(["python", os.path.join(source_dir, "virtualenv.py"),
                           "-q", "--system-site-packages",
                           get_virtualenv_dir()])


def install_packages():
    for repo in ["dnarvaez/osbuild@chroot", "dnarvaez/broot"]:
        subprocess.check_call([get_bin_path("pip"), "-q", "install",
                               "git+git://github.com/%s" % repo])


def delete_virtualenv(sandbox_name=None):
    try:
        shutil.rmtree(get_virtualenv_dir(sandbox_name=sandbox_name))
    except OSError:
        pass


def delete_sandbox(sandbox_name=None):
    try:
        shutil.rmtree(get_sandbox_dir(sandbox_name))
    except OSError:
        pass


def check_binaries(binary_names):
    env = {"PATH": os.path.expandvars("/usr/sbin:/sbin:$PATH")}

    with open(os.devnull, "w") as devnull:
        for name in binary_names:
            try:
                subprocess.call([name], stdout=devnull,
                                stderr=subprocess.STDOUT, env=env)
            except OSError:
                print("Please install %s." % name)
                return False

    return True


def run_broot(args, log=False):
    os.chdir(get_broot_dir())

    broot_args = ["sudo", get_bin_path("broot")]
    broot_args.extend(args)

    try:
        os.makedirs(get_log_dir())
    except OSError:
        pass

    with open(get_broot_log_path(), "w") as f:
        if log:
            subprocess.check_call(broot_args, stdout=f,
                                  stderr=subprocess.STDOUT)
        else:
            subprocess.check_call(broot_args)


def clean():
    try:
        os.unlink(get_lock_file_path("host"))
        os.unlink(get_lock_file_path("broot"))
        os.unlink(get_broot_log_path())
    except OSError:
        pass

    delete_sandbox("host")
    delete_sandbox("broot")

def is_buildbot():
    return buildbot_env in os.environ


def is_chroot():
    return "BROOT" in os.environ


def get_virtualenv_exists():
    return os.path.exists(get_virtualenv_dir())


def setup(command):
    build_virtualenv = not get_virtualenv_exists() or command == "pull"
    root_dir = os.path.join(get_broot_dir(), "out", "root")
    build_root = command != "clean" and not os.path.exists(root_dir)
    update_root = command == "pull"
    pull = command == "pull" and not is_buildbot()

    if build_virtualenv or pull or build_root:
        if is_chroot():
            print("\n= Setup the broot build system =\n")
        else:
            print("\n= Setup the host build system =\n")

    if build_virtualenv:
        delete_virtualenv()

        try:
            print("* Create the python virtualenv")
            create_virtualenv()

            print("* Install python packages")
            install_packages()
        except Exception, e:
            delete_virtualenv()
            raise e

    if pull:
        print("* Pull latest sugar-build")

        os.chdir(get_base_dir())
        subprocess.check_call(["git", "pull", "--ff-only", "-q", "origin",
                               "chroot"])

    if build_root:
        print("* Create the build root")
        run_broot(["create"], log=True)

    if update_root:
        print("* Update the build root")
        run_broot(["update"], log=True)

    # When we run the broot osbuild the virtualenv will be updated
    if command == "pull":
        delete_virtualenv("broot")


def get_available_commands():
    available_commands = []

    commands_dirs = [get_commands_dir("broot")]

    if not is_chroot():
        commands_dirs.append(get_commands_dir("host"))

    for command_dir in commands_dirs:
        for command in os.listdir(command_dir):
            available_commands.append(command)

    return available_commands


def print_help():
    print("\n= Available commands =\n")
    print("\n".join(get_available_commands()))
    print("\nSee also %s" % docs_url)


def get_command_path(command, commands_group):
    command_path = os.path.join(get_commands_dir(commands_group), command)
    if os.path.exists(command_path):
        return command_path
    return None


def run_command(command):
    command_path = get_command_path(command, "host")
    if command_path is None:
        is_broot_command = True
        command_path = get_command_path(command, "broot")
    else:
        is_broot_command = False

    if not is_chroot() and is_broot_command:
        args = ["run", "/home/broot/sugar-build/osbuild"]

        if len(sys.argv) > 1:
            args.extend(sys.argv[1:])

        run_broot(args)
    else:
        args = [get_bin_path("python"), command_path]

        if len(sys.argv) > 2:
            args.extend(sys.argv[2:])

        os.environ["PYTHONPATH"] = get_commands_dir()
        os.environ["PATH"] = os.path.expandvars("$PATH:%s" % get_bin_path())

        subprocess.check_call(args)


def check_lock():
    try:
        fcntl.lockf(get_lock_file(), fcntl.LOCK_EX | fcntl.LOCK_NB)
    except IOError:
        return False

    return True


def main():
    if os.geteuid() == 0:
        print("osbuild should not be run as root.")
        sys.exit(1)

    if not check_lock():
        print("Another osbuild instance is running.")
        sys.exit(1)

    if "OSBUILD_SHELL" in os.environ:
        print("Don't run osbuild inside an osbuild shell, you can just "
              "run the commands directly.")
        sys.exit(1)

    if not check_binaries(["yum", "rpm"]):
        sys.exit(1)

    os.environ["PIP_DOWNLOAD_CACHE"] = get_cache_dir()

    if len(sys.argv) > 1:
        command = sys.argv[1]
    else:
        command = "shell"

    if command not in get_available_commands():
        print_help()
        sys.exit(1)

    setup(command)
    run_command(command)

    if command == "shell":
        print_help()

    if command == "clean":
        run_broot(["clean"])
        clean()


if __name__ == "__main__":
    main()
